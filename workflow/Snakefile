configfile: "config/config.yaml"

# Function to get all families for alignment
#def get_all_aligned_families(wildcards):
#    checkpoint_output = checkpoints.family_fasta.get(**wildcards).output[0]
#    families = [f.split('.')[0] for f in os.listdir(checkpoint_output)]
#    return expand("results/fasta/family/{family}_aligned.fasta", family=families)

# Rule all to trigger the alignment of all families
#rule all:
#    input:
#        get_all_aligned_families

# Aligns sequences with HMM.
#rule hmm_align:
#    input:
#        "results/fasta/family/{family}.fasta"
#    output:
#        "results/fasta/family/{family}_aligned.fasta"
#    params:
#        log_level=config['log_level']
#    conda:
#        "envs/environment.yml"
#    script:
#        "scripts/msa_hmm.py"

# Creates and populates the SQLite database with filtered sequence records.
# Uses BOLD dump TSV as defined in config file
rule create_database:
  input: config["file_names"]["bold_tsv"]
  output: "results/databases/BOLD_{}_barcodes.db".format(config["marker"])
  params:
    marker=config["marker"],
    minlength=config["minlength"],
    log_level=config['log_level']
  conda: "envs/environment.yml"
  script:
      "scripts/bold_data_dump.py"

# Enriches the database with mappings to OpenToL. Because this operates on
# the same database file, the output is a 0-byte file `map_opentol.ok` to
# indicate that the task was run.
rule map_opentol:
  input: rules.create_database.output
  output: 'results/databases/map_opentol.ok'
  params:
    marker=config['marker'],
    log_level=config['log_level']
  conda: "envs/environment.yml"
  script:
      "scripts/map_opentol.py"

# Exports unaligned sequences aggregated at family level.
checkpoint family_fasta:
    input: rules.map_opentol.output
    output: directory(config["file_names"]["fasta_dir"])
    params:
      log_level=config['log_level'],
      fasta_dir=config["file_names"]["fasta_dir"],
      filter_level=config["fasta_filter"]["filter_level"],
      filter_name=config["fasta_filter"]["filter_name"],
      database=rules.create_database.output,
      maxseq=config["maxseq"],
      minseq=config["minseq"]
    conda: "envs/environment.yml"
    script:
        "scripts/family_fasta.py"

# Creates and populates the OpenToL SQLite database. Uses the location of
# the OpenToL tree as per the config file. Merges the resulting database
# with the BOLD database (which gains a table `node`). SQLite can, at time
# of writing, not apply foreign key constraints retroactively. This is a
# shame because taxon.opentol_id implicitly references node.id.
rule megatree_loader:
    input:
        tree = config["file_names"]["open_tre"],
        db = rules.create_database.output,
        mapping = rules.map_opentol.output
    output: 'results/databases/merge_opentol.ok'
    conda: "envs/environment.yml"
    params:
        tempdb = temp("results/databases/opentree_nodes.db"),
        tempsql = temp("results/databases/node.sql")
    shell:
        """
        megatree-loader -i {input.tree} -d {params.tempdb} -v
        sqlite3 {params.tempdb} ".dump node" > {params.tempsql}
        sqlite3 {input.db} < {params.tempsql}
        touch {output}
        """

# This extracts all OTT IDs from a FASTA file and returns them as CSV for input into megatree-pruner
# grep '>' Aotidae.fasta | cut -f1 -d'|' | sort | uniq | sed -e 's/>//g' | tr '\n' ',