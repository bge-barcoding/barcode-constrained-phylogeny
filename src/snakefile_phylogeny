import glob

configfile: "config.yaml"

fasta_files = glob.glob("data/family_fastas/*.fasta")

database_file = "data/databases/BOLD_{}_barcodes_test.db".format(config["marker"])

XXX This needs to be a pipeline, i.e. one target depends on another. Right now these all look like unconnected operations.

rule unzip:
    input: config["file_names"]["bold_zip"]
    output: config["file_names"]["bold_tsv"]
    threads: config["cpu_cores"]
    script:
        "unzip_targz.py"


rule create_database:
  input: config["file_names"]["bold_tsv"]
  output: 'temporary_database.db'
  params: marker=config["marker"]
  threads: config["cpu_cores"]
  script:
      "bold_data_dump.py"


rule map_opentol:
  input: 'temporary_database.db'
  output: database_file
  params: marker=config['marker']
  threads: config["cpu_cores"]
  script:
      "map_opentol.py"


rule family_fasta:
    input:
        database_file
    output:
        dynamic("data/fasta/family/{family}.fasta")
    threads:
        config["cpu_cores"]
    script:
        "family_fasta.py"

# XXX delete me. This is not needed because macse is handled by conda
rule download_macse:
    output: 'data/macse_v2.06.jar'
    shell: "wget -P data/ https://bioweb.supagro.inra.fr/macse/releases/macse_v2.06.jar"


# XXX update me to use the macse as provided by conda, which is an executable `macse`
rule align_masce:
    input:  'data/macse_v2.06.jar', "data/fasta/family/{family}.fasta"
    output: "data/fasta/alignment/{family}_NT.fasta", "data/fasta/alignment/{family}_AA.fasta"
    threads: config["cpu_cores"]
    script: "create_MSA.py"


rule all:
    input: dynamic("data/fasta/alignment/{family}_NT.fasta")
    threads:
        4
    shell: "touch {input}"




