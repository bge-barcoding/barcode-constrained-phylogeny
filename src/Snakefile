
configfile: "config.yaml"

database_file = "../data/databases/BOLD_{}_barcodes.db".format(config["marker"])
datatype = config['datatype']


rule unzip:
    input: config["file_names"]["bold_zip"]
    output: config["file_names"]["bold_tsv"]
    threads: config["cpu_cores"]
    script:
        "unzip_targz.py"


rule create_database:
  input: config["file_names"]["bold_tsv"]
  output: 'temporary_database.db'
  params:
    marker=config["marker"],
    minlength=config["minlength"],
    log_level=config['log_level']
  threads: config["cpu_cores"]
  script:
      "bold_data_dump.py"


rule map_opentol:
  input: 'temporary_database.db'
  output: database_file
  params:
    marker=config['marker'],
    log_level=config['log_level']
  threads: config["cpu_cores"]
  script:
      "map_opentol.py"


rule family_fasta:
    input:
        database_file
    output:
        dynamic("../data/fasta/family/{family}.fasta")
    params:
        log_level=config['log_level'],
        fasta_dir=config['file_names']['fasta_dir'],
        filter_level=config['fasta_filter']['filter_level'],
        filter_name=config['fasta_filter']['filter_name'],
        maxseq=config['maxseq'],
        minseq=config['minseq']
    threads:
        config["cpu_cores"]
    script:
        "family_fasta.py"

rule hmm_build:
    #input:
    output:
        sequence_file = "../data/fasta/family/hmm/seq_all_{}.fasta".format(config["marker"]),
        alignment_file = "../data/fasta/family/hmm/seq_aln_{}.fasta".format(config["marker"])
    params:
        log_level=config['log_level'],
        hmm=config['file_names']['hmm']
    threads:
        config["cpu_cores"]
    script:
        "hmm_build.py"


rule hmm_align:
    input:  "../data/fasta/family/{family}.fasta"
    output: "../data/fasta/alignment/{{family}}_{}_hmm.fasta".format(datatype)
    params:
        log_level=config['log_level'],
        hmm=config['file_names']['hmm']
    threads:
        config["cpu_cores"]
    script:
        "msa_hmm.py"


rule get_opentree_zip:
    output: "../data/opentree/opentree13.4_tree/labelled_supertree/labelled_supertree.tre"
    threads: config["cpu_cores"]
    shell:  "wget -P ../data/opentree/ https://files.opentreeoflife.org/synthesis/opentree13.4/opentree13.4tree.tgz && tar -xvzf ../data/opentree/opentree13.4tree.tgz --directory ../data/opentree"


rule unique_otts:
    input: "../data/fasta/alignment/{{family}}_{}_hmm.fasta".format(datatype)
    output: "../data/ott_lists/{family}_otts.txt"
    threads: config["cpu_cores"]/2
    shell: 'cat {input} | egrep ">" | cut -f1 -d "_" | tr -d ">" | sort -u > {output}'


rule megatree_loader:
    input: "../data/opentree/opentree13.4_tree/labelled_supertree/labelled_supertree.tre"
    output: "../data/databases/opentree_nodes.db"
    threads: config["cpu_cores"]
    shell: "megatree-loader -i {input} -d {output}"


rule megatree_pruner:
    input: "../data/databases/opentree_nodes.db", "../data/ott_lists/{family}_otts.txt"
    output: "../data/newick/{family}_constraint_temp.nwk"
    threads: config["cpu_cores"]/2
    shell: "megatree-pruner -d {input[0]} -i {input[1]} > {output}"


rule edit_newick:
    input: "../data/fasta/alignment/{{family}}_{}_hmm.fasta".format(datatype), "../data/newick/{family}_constraint_temp.nwk"
    output:  "../data/newick/{family}_constraint.nwk"
    threads: config["cpu_cores"]/2
    script: "edit_constraint.py"


rule raxml:
    input: "../data/fasta/alignment/{{family}}_{}_hmm.fasta".format(datatype), "../data/newick/{family}_constraint.nwk"
    output: "../data/raxml/{{family}}/{{family}}_{}.raxml.log".format(datatype)
    threads: config["cpu_cores"]/2
    shell: "mkdir -p ../data/raxml/{{wildcards.family}} | raxml-ng --msa {{input[0]}} --model GTR+G --tree-constraint {{input[1]}} --prefix ../data/raxml/{{wildcards.family}}/{{wildcards.family}}_{}".format(datatype)


rule all:
    input: dynamic("../data/raxml/{{family}}/{{family}}_{}.raxml.log".format(datatype))
    threads: config["cpu_cores"]
    shell: "touch {input}"


# rule test_change_ids_all:
#     input: dynamic("../data/raxml/{family}.raxml.log")
#     threads: config["cpu_cores"]
#     shell: "touch {input}"


# rule test_raxml:
#     input: "../data/raxml/Hominidae-Homo/Hominidae-Homo_{}.raxml.log".format(datatype)
#     threads: config["cpu_cores"]
#     shell: 'touch {input}'

#     # rule test_constraint:
#     #     input: "data/newick/Acanthosomatidae_constraint.nwk"
#     #     threads: config["cpu_cores"]
#     #     shell: 'touch {input}'
#
# rule test_change_ids_acantho:
#     input:"data/fasta/alignment/Acanthosomatidae_NT_corrected.fasta"
#     threads: 4
#     shell: "touch {input}"

# rule test_change_ids_all:
#     input: dynamic("data/fasta/alignment/{family}_NT_corrected.fasta")
#     threads:
#         4
#     shell: "touch {input}"

# rule test_hmmer:
#     input: "../data/fasta/alignment/Hominidae-Homo_{}_hmm.fasta".format(datatype)
#     threads: config["cpu_cores"]
#     shell: "touch {input}"


